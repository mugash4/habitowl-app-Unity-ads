rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - query by uid field
    match /users/{document} {
      // Allow read if authenticated user is querying their own data
      allow read: if request.auth != null && 
        (resource.data.uid == request.auth.uid || request.auth.uid == document);
      
      // Allow create if authenticated
      allow create: if request.auth != null && 
        request.resource.data.uid == request.auth.uid;
      
      // Allow update if user owns the document
      allow update: if request.auth != null && 
        resource.data.uid == request.auth.uid;
      
      // Allow delete if user owns the document
      allow delete: if request.auth != null && 
        resource.data.uid == request.auth.uid;
    }
    
    // ✅ FIXED: Habits security rules
    match /habits/{habitId} {
      // For reading existing habit - check the stored userId
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      // ✅ CRITICAL FIX: For creating NEW habit - use request.resource (the data being written)
      // During create, resource doesn't exist yet, so we MUST check request.resource
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.userId != null;
      
      // For updating existing habit - check both old and new data
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
      
      // For deleting existing habit - check the stored userId  
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Admin configuration
    match /admin_config/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.email in get(/databases/$(database)/documents/admin_config/settings).data.admin_emails;
    }
    
    // App information
    match /app_info/{document} {
      allow read: if true;
      allow write: if request.auth != null && 
        request.auth.token.email in get(/databases/$(database)/documents/admin_config/settings).data.admin_emails;
    }
    
    // Analytics
    match /analytics/{document} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        request.auth.token.email in get(/databases/$(database)/documents/admin_config/settings).data.admin_emails;
    }
    
    // Referrals
    match /referrals/{referralId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.referrerId || 
         request.auth.uid == resource.data.referredUserId);
      allow create: if request.auth != null;
    }
    
    // Support tickets
    match /support_tickets/{ticketId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow read: if request.auth != null && 
        request.auth.token.email in get(/databases/$(database)/documents/admin_config/settings).data.admin_emails;
    }
    
    // Promo offers
    match /promo_offers/{offerId} {
      allow read: if true;
      allow write: if request.auth != null && 
        request.auth.token.email in get(/databases/$(database)/documents/admin_config/settings).data.admin_emails;
    }
  }
}
